import numpy as np
import cv2
from matplotlib import pyplot as plt
import sys


#NEED TO REVISE SIMPLY
def ave(sum, number):
    ave = sum / number
    return ave


tracker = cv2.TrackerKCF_create()
cam = cv2.VideoCapture('bbible.mp4')

roi = cv2.imread('bbible_roi_small.jpg') #query image
gray_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)

ret, first_frame = cam.read() #train Image
gray_first_frame = cv2.cvtColor(first_frame, cv2.COLOR_BGR2GRAY)

w, h = gray_roi.shape[::-1] #roi size 187 x 167

#initiate SIFT
sift = cv2.xfeatures2d.SIFT_create() #keypoint thresholod

#find keypoints and descriptors with SIFT
kp_roi, des_roi = sift.detectAndCompute(gray_roi, None)
kp_f_frm, des_f_frm = sift.detectAndCompute(gray_first_frame, None)

#FLANN parameters / Fast Library for Approximate Nearest Neighbors
FLANN_INDEX_KDTREE = 0
index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)
search_params = dict(checks = 50)

flann = cv2.FlannBasedMatcher(index_params, search_params)

matches = flann.knnMatch(des_roi, des_f_frm, k=2)

#need to draw only good matches, create a mask
matchesmask = [[0,0] for i in range(len(matches))]

#save object point

good_key = []

for i, (m, n) in enumerate(matches):
    if m.distance < 0.6 * n.distance:
        matchesmask[i] = [1,0]
        good_key.append(kp_f_frm[i].pt)

good_key = np.int32(good_key)
print(good_key)

draw_params = dict( matchColor = (0, 255, 0), singlePointColor = (255, 0, 0), matchesMask = matchesmask, flags = 0)
img_res = cv2.drawMatchesKnn(gray_roi, kp_roi, gray_first_frame, kp_f_frm, matches, None, **draw_params)
cv2.imshow('draw_match', img_res)

sum_r = 0
sum_c = 0

for i in range(len(good_key)):
    sum_r += np.uint(good_key[i][0])
    sum_c += np.uint(good_key[i][1])

number = len(good_key)
ave_r = ave(sum_r, number)
ave_c = ave(sum_c, number)

middle_r = np.uint(ave_r)
middle_c = np.uint(ave_c)

print(middle_r)
print(middle_c)

track_window = (int(middle_r), int(middle_c), int(w), int(h))
print(track_window)


ok = tracker.init(first_frame, track_window)


#initialize tracker with first frame and bounding box
h_save, w_save = first_frame.shape[:2]
fourcc = cv2.VideoWriter_fourcc(*'DIVX')
video_write = cv2.VideoWriter('saved_out.avi', fourcc, 25.0, (w_save, h_save))

while (cam.isOpened()):
    ret, frame = cam.read()
    upd, obj = tracker.update(frame)

    if upd: #draw bounding box
        x1 = (int(obj[0] - (1/2) * obj[2] ), int(obj[1] - (1/2) * obj[3]))
        x2 = (int (obj[0] + (1/2) * obj[2] ), int(obj[1] + (1/2) * obj[3]))
        cv2.rectangle(frame, x1, x2, (255, 0, 0))
        #cv2.circle(frame, (int(obj[0]), int(obj[1])), 10, (255, 0, 0))

    video_write.write(frame)
    cv2.imshow("Track object", frame)

    k = cv2.waitKey(1) & 0xff
    if k == 27:
        break

cam.release()
video_write.release()
cv2.destroyAllWindows()
